/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a coach-ownership model for WODs. Coaches can only manage WODs under their specific path.
 * @data_structure Data is organized hierarchically: /coaches/{coachId}/wods/{wodId}.  Coach profiles are stored in /coaches/{coachId}
 * @key_security_decisions WOD listing is restricted to the owner coach. Public listing is disallowed.
 * @denormalization The `coachId` is implicitly denormalized because of the path: /coaches/{coachId}/wods/{wodId}
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a helper function to check if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a helper function to check if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines a helper function to check if the authenticated user ID matches the existing document's coachId and that the document exists
     */
    function isExistingOwner(coachId) {
      return isOwner(coachId) && exists(resource.data.id);
    }

    /**
     * @description Defines a helper function to check if the authenticated user is a coach.
     */
    function isCoach() {
        return exists(/databases/$(database)/documents/roles_coach/$(request.auth.uid));
    }

   /**
     * @description Protects coach profiles.
     * @path /coaches/{coachId}
     * @allow (create) A coach can create their own profile if the coachId matches their UID.
     * @allow (get) A user can read a coach's profile.
     * @allow (list) A user can list coach profiles.
     * @allow (update) A coach can update their profile if the coachId matches their UID.
     * @allow (delete) A coach can delete their profile if the coachId matches their UID and the document exists.
     * @deny (create) A coach cannot create a profile with a mismatched coachId.
     * @deny (update) A coach cannot update another coach's profile.
     * @deny (delete) A coach cannot delete another coach's profile.
     * @principle Enforces user-ownership; validates creatorId on create and enforces immutability on update.
     */
    match /coaches/{coachId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(coachId);
      allow update: if isSignedIn() && isOwner(coachId);
      allow delete: if isSignedIn() && isOwner(coachId) && existsAfter(/databases/$(database)/documents/coaches/$(coachId));
    }

    /**
     * @description Protects WOD data created by a specific coach.
     * @path /coaches/{coachId}/wods/{wodId}
     * @allow (create) A coach can create a WOD under their path if they are authenticated and the coachId matches their UID.
     * @allow (get) Any authenticated user can read a WOD.
     * @allow (list) A coach can list their own WODs.
     * @allow (update) A coach can update a WOD under their path if they are authenticated and the coachId matches their UID and the document exists.
     * @allow (delete) A coach can delete a WOD under their path if they are authenticated and the coachId matches their UID and the document exists.
     * @deny (create) A coach cannot create a WOD under another coach's path.
     * @deny (update) A coach cannot update a WOD under another coach's path.
     * @deny (delete) A coach cannot delete a WOD under another coach's path.
     * @principle Enforces user-ownership for writes; allows public reads.
     */
    match /coaches/{coachId}/wods/{wodId} {
      allow get: if true;
      allow list: if isSignedIn() && isOwner(coachId);
      allow create: if isCoach() && isSignedIn() && isOwner(coachId);
      allow update: if isCoach() && isSignedIn() && isOwner(coachId) && existsAfter(/databases/$(database)/documents/coaches/$(coachId)/wods/$(wodId));
      allow delete: if isCoach() && isSignedIn() && isOwner(coachId) && existsAfter(/databases/$(database)/documents/coaches/$(coachId)/wods/$(wodId));
    }

    /**
     * @description Protects coach role documents.
     * @path /roles_coach/{coachId}
     * @allow (create) A user can create a coach role document if they are a coach and the coachId matches their UID.
     * @allow (get) A user can read a coach role document.
     * @allow (list) A user can list coach role documents.
     * @allow (update) A coach can update their own coach role document if the coachId matches their UID and the document exists.
     * @allow (delete) A coach can delete their own coach role document if the coachId matches their UID and the document exists.
     * @deny (create) A user cannot create a coach role document with a mismatched coachId.
     * @deny (update) A coach cannot update another coach's coach role document.
     * @deny (delete) A coach cannot delete another coach's coach role document.
     * @principle Enforces user-ownership; validates creatorId on create and enforces immutability on update.
     */
    match /roles_coach/{coachId} {
      allow get, list: if true;
      allow create: if isCoach() && isSignedIn() && isOwner(coachId);
      allow update: if isCoach() && isSignedIn() && isOwner(coachId) && existsAfter(/databases/$(database)/documents/roles_coach/$(coachId));
      allow delete: if isCoach() && isSignedIn() && isOwner(coachId) && existsAfter(/databases/$(database)/documents/roles_coach/$(coachId));
    }
  }
}