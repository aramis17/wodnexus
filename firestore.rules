/**
 * @fileoverview Firestore Security Rules for the WOD Calendar application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model where only authenticated coaches can manage their own WODs.
 *
 * Data Structure:
 * - /coaches/{coachId}: Stores coach profiles.
 * - /coaches/{coachId}/wods/{wodId}: Stores WODs created by each coach. The `coachId` is denormalized within the WOD document.
 * - /roles_coach/{coachId}: Stores coach role documents. Existence of a document at /roles_coach/{uid} indicates the user is a coach.
 *
 * Key Security Decisions:
 * - Listing WODs is restricted to authenticated coaches for their own WODs only. Public listing is disallowed.
 * - WOD creation, updates, and deletion are restricted to the coach who owns the WOD.
 * - The coach ID is denormalized into the WOD document to avoid costly `get()` calls in the security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the user is signed in and the UIDs match.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided user ID and the resource exists.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the user is signed in, the UIDs match and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    /**
     * @description Rules for coach profiles.
     * @path /coaches/{coachId}
     * @allow (create) - An authenticated user can create their own coach profile if the coachId matches their UID.
     * @allow (get, update, delete) - Only the coach can get, update, or delete their own profile.
     * @deny (create) - An unauthenticated user cannot create a coach profile.
     * @deny (update, delete) - Another coach cannot update or delete this coach profile.
     * @principle Enforces document ownership for writes.
     */
    match /coaches/{coachId} {
      allow get: if isOwner(coachId);
      allow list: if false;
      allow create: if isOwner(coachId);
      allow update: if isExistingOwner(coachId);
      allow delete: if isExistingOwner(coachId);
    }

    /**
     * @description Rules for WOD documents within a coach's subcollection.
     * @path /coaches/{coachId}/wods/{wodId}
     * @allow (create) - A coach can create a WOD under their own coachId if the coachId in the request matches their UID.
     * @allow (get, list, update, delete) - Only the coach who owns the WOD can get, list, update, or delete it.
     * @deny (create) - A coach cannot create a WOD under another coach's coachId.
     * @deny (update, delete) - Another coach cannot update or delete this WOD.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /coaches/{coachId}/wods/{wodId} {
      allow get: if isOwner(coachId);
      allow list: if isOwner(coachId);
      allow create: if isSignedIn() && request.auth.uid == coachId;
      allow update: if isExistingOwner(coachId);
      allow delete: if isExistingOwner(coachId);
    }

        /**
         * @description Rules to determine coach status based on document existence.
         * @path /roles_coach/{coachId}
         * @allow (get) - Any authenticated user can check if a coach role exists for a given coach ID.
         * @allow (create) - A coach can create their own coach role if the coachId matches their UID.
         * @deny (list, update, delete) - Listing is not allowed. Only the coach can update or delete their own profile.
         * @principle Restricts modification of roles to authorized users.
         */
    match /roles_coach/{coachId} {
          allow get: if isSignedIn();
          allow list: if false;
          allow create: if isOwner(coachId);
          allow update: if isExistingOwner(coachId);
          allow delete: if isExistingOwner(coachId);
    }

    /**
     * @description Rules for the top-level 'wods' collection. Access is denied since the application uses the coach subcollections only.
     * @path /wods
     * @deny (get, list, create, update, delete) - All operations are denied on this collection.
     * @principle Prevents direct access to the top-level collection.
     */
    match /wods {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

  }
}