/**
 * @fileOverview Firestore Security Rules for a WOD calendar application with Coach roles.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for coaches and their WODs. Coaches can only manage WODs they have created.
 *
 * Data Structure:
 * - /coaches/{coachId}: Stores coach profiles, with coachId matching the user's UID.
 * - /coaches/{coachId}/wods/{wodId}: Stores WODs created by the coach, with denormalized coachId for authorization.
 * - /roles_coach/{coachId}:  Indicates a coach role by the existence of a document with ID equal to the user's UID.
 *
 * Key Security Decisions:
 * - Only authenticated coaches can create, update, or delete WODs under their respective coachId.
 * - Data consistency between paths and document IDs is enforced to prevent unauthorized data creation.
 * - The rules explicitly prevent listing all WODs; coaches can only list WODs under their ID.
 *
 * Denormalization for Authorization:
 * - WOD documents include a denormalized 'coachId' to allow authorization without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows coaches to manage their profiles.
     * @path /coaches/{coachId}
     * @allow (create) - Authenticated user with UID 'user123' can create a coach profile at /coaches/user123.
     * @allow (get, update, delete) - Authenticated user with UID 'user123' can get, update, or delete their profile at /coaches/user123.
     * @deny (create) - Authenticated user with UID 'user456' cannot create a coach profile at /coaches/user123.
     * @deny (update, delete) - Authenticated user with UID 'user456' cannot update or delete the profile at /coaches/user123.
     * @principle Enforces document ownership, restricting profile management to the owning user.
     */
    match /coaches/{coachId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(coachId);
      allow update: if isExistingOwner(coachId);
      allow delete: if isExistingOwner(coachId);
    }

    /**
     * @description Allows coaches to manage their WODs.
     * @path /coaches/{coachId}/wods/{wodId}
     * @allow (create) - Authenticated coach with UID 'coach123' can create a WOD at /coaches/coach123/wods/wod456.
     * @allow (get, update, delete) - Authenticated coach with UID 'coach123' can get, update, or delete their WOD at /coaches/coach123/wods/wod456.
     * @allow (list) - Authenticated coach with UID 'coach123' can list all of their WODs under /coaches/coach123/wods.
     * @deny (create) - Authenticated user with UID 'user456' cannot create a WOD under /coaches/coach123/wods/wod456.
     * @deny (update, delete) - Authenticated user with UID 'user456' cannot update or delete the WOD at /coaches/coach123/wods/wod456.
     * @principle Enforces document ownership, restricting WOD management to the creating coach.
     */
    match /coaches/{coachId}/wods/{wodId} {
      allow get: if isSignedIn() && isOwner(coachId);
      allow list: if isSignedIn() && isOwner(coachId);
      allow create: if isCoach() && isOwner(coachId) && request.resource.data.id == wodId;
      allow update: if isCoach() && isExistingOwner(coachId) && request.resource.data.id == wodId;
      allow delete: if isCoach() && isExistingOwner(coachId);
    }

        /**
         * @description Allows users with a 'coach' role to have their role document created.
         * @path /roles_coach/{coachId}
         * @allow (create) - Authenticated user with UID 'coach123' can create a coach role document at /roles_coach/coach123.
         * @allow (get) - Any authenticated user can check if a coach role exists for a specific user
         * @deny (create) - Authenticated user with UID 'user456' cannot create a coach role document at /roles_coach/coach123.
         * @deny (update, delete) - Only the system should be able to modify/delete these role documents.
         * @principle Protects role creation by enforcing that only the authenticated user can create their role document.
         */
    match /roles_coach/{coachId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == coachId;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document, based on the provided userId.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId - The user ID to compare against the resource's 'userId' field.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'coach' role by verifying the existence of a document under /roles_coach/{userId}.
     * @return {boolean} True if the user has the 'coach' role, false otherwise.
     */
    function isCoach() {
        return exists(/databases/(database)/documents/roles_coach/$(request.auth.uid));
    }
  }
}